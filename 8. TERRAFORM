

INFRASTRUCTURE: RESOURCES USED TO RUN OUR APPLICATION ON CLOUD.
EX: SERVER, VPC, ELB, S3, ASG ETC-------

CLOUD -- > AWS --- > MANUALLY 

LIMITATIONS:
1. Its time consuming.
2. It will have chance of doing mistakes.
3. Delaying the activites.

AUTOMATION WAYS:
1. CFT -- > CLOUDFORMATION TEMPLATE (JSON/YAML)
2. ARM -- > AZURE RESOURCE MANAGER
3. GDE -- > GOOGLE DEPLOY ENGINE

2014 -- > MITCHELL HASIMOTO -- > TERRAFORM

TERRAFORM -- > AWS, GCP, AZURE,

TERRAFORM USES HCL LANGUAGE
CONFIGURATION FILE: the files which have the resource information
ex: .tf files

terraform -- > servers < --- configure & deploy by ansible

aws configure 

terraform init	: to initalize the provider plugins.
terraform plan	: to create the execution plan
terraform apply	: to create the resources
terraform destroy: to delete the resource


statefile: it will store the resource infromation which is created by terraform only.
terraform state list : to list the resources created by terraform.

targe: it is used to delete one specific resource

terraform destroy -target="aws_instance.one[2]"


code:

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "one" {
ami = "ami-04823729c75214919"
instance_type = "t2.micro"
count = 5
}

HISTORY:

  1  yum install terraform -y
    2  sudo yum install -y yum-utils
    3  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    4  yum install terraform -y
    5  terraform -v
    6  mkdir swiggy
    7  cd swiggy/
    8  aws configure
    9  ls -al
   10  cd
   11  ls -al
   12  cd swiggy/
   13  vim main.tg
   14  vim main.tf
   15  terraform init
   16  ll
   17  ls -al
   18  terraform plan
   19  terraform apply
   20  vim main.tf
   21  terraform apply
   22  cat main.tf
   23  terraform destroy
   24  vim main.tf
   25  terraform plan
   26  terraform apply
   27  ll
   28  vim terraform.tfstate
   29  terraform state list
   30  terraform destroy -target="aws_instance.one[0]"
   31  terraform state list
   32  terraform destroy -target="aws_instance.one[2]"
   33  terraform state list
   34  terraform destroy
   35  cat main.tf
   36  history

=======================================================================================================================================

DAY-02:

VARIBALES: Used to store the values 
and the values are going to chnage as per time.
this block is used to chnage the vlaues frequently.

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "raham" {
ami = "ami-04823729c75214919"
instance_type = "t2.micro"
key_name = "4pmbatch"
tags = {
Name = "raham-terraform"
}


TYPE-1: STRING -- > it consist of numeric and aplhabets.

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "raham" {
ami = "ami-04823729c75214919"
instance_type = var.instance_type
key_name = var.key_name
tags = {
Name = "raham-terraform"
}
}

variable "instance_type" {
description = "this block is to dfine the variable of instance type"
type = string
default = "t2.micro"
}

variable "key_name" {
description = "*"
type = string
default = "4pmbatch"
}


TYPE-2: NUMBER

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "raham" {
count = var.instance_count
ami = "ami-04823729c75214919"
instance_type = "t2.micro"
key_name = "4pmbatch"
tags = {
Name = "raham-terraform"
}
}

variable "instance_count" {
description = "*"
type = number
default = 3
}


TYPE-3:
TYPE-4:

VARIABLE FILES: it will have only variable blocks inside the file.

vim main.tf

provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "raham" {
count = var.instance_count
ami = "ami-04823729c75214919"
instance_type = "t2.micro"
key_name = "4pmbatch"
tags = {
Name = "raham-terraform"
}
}

vim variable.tf

variable "instance_count" {
description = "*"
type = number
default = 3
}


TFVAR FILES: It will divide the variable block and the value is going to store in another file.
note: use -var-file="filename" when we are working with tfvar files
command: terraform apply --auto-approve -var-file="raham.tfvars"

cat main.tf
provider "aws" {
region = "us-east-1"
}

resource "aws_instance" "raham" {
count = var.instance_count
ami = "ami-04823729c75214919"
instance_type = "t2.micro"
key_name = "4pmbatch"
tags = {
Name = "raham-terraform"
}
}

cat variable.tf
variable "instance_count" {
}

cat raham.tfvars
instance_count = "3"

command: terraform apply --auto-approve -var-file="raham.tfvars"
command: terraform destroy --auto-approve -var-file="raham.tfvars"


HISTORY:

30  aws configure
   31  ll
   32  cd terraform/
   33  ll
   34  rm -rf *
   35  ll
   36  terraform -v
   37  vim main.tf
   38  ll
   39  terraform init
   40  terraform plan
   41  vim main.tf
   42  terraform plan
   43  vim main.tf
   44  terraform plan
   45  cd
   46  ll
   47  cd .aws/
   48  ll
   49  cat c
   50  cat config
   51  cat credentials
   52  vim credentials
   53  cd
   54  cd terraform/
   55  terraform plan
   56  terraform apply --auto-approve
   57  ll
   58  terraform state list
   59  cat terraform.tfstate
   60  terraform destroy --auto-approve
   61  vim main.tf
   62  terraform plan
   63  terraform apply --auto-approve
   64  terraform destroy --auto-approve
   65  vim main.tf
   66  terraform apply --auto-approve
   67  terraform destroy --auto-approve
   68  cat terraform.tfstate
   69  cat main.tf
   70  vim main.tf
   71  terraform plan
   72  terraform apply --auto-approve
   73  vim main.tf
   74  terraform apply --auto-approve
   75  vim main.tf
   76  terraform apply --auto-approve
   77  vi main.tf
   78  terraform apply --auto-approve
   79  vim main.tf
   80  terraform apply --auto-approve
   81  vim main.tf
   82  terraform apply --auto-approve
   83  terraform destroy --auto-approve
   84  terraform apply --auto-approve
   85  vim main.tf
   86  terraform apply --auto-approve
   87  terraform state list
   88  terraform destroy --auto-approve
   89  cat main.tf
   90  vim main.tf
   91  ll
   92  vim variable.tf
   93  ll
   94  cat main.tf
   95  cat variable.tf
   96  terraform apply --auto-approve
   97  vim variable.tf
   98  terraform apply --auto-approve
   99  terraform destroy --auto-approve
  100  cat main.tf
  101  cat variable.tf
  102  vim variable.tf
  103  vim raham.tfvars
  104  terraform apply --auto-approve
  105  vim raham.tfvars
  106  terraform apply --auto-approve
  107  terraform init -lock=false
  108  ps
  109  kill -9 31367
  110  terraform apply --auto-approve
  111  ll
  112  terraform destroy --auto-approve
  113  cat main.tf
  114  cat variable.tf
  115  cat raham.tfvars
  116  vim raham.tfvars
  117  terraform apply --auto-approve
  118  terraform apply --auto-approve -var-file="raham.tfvars"
  119  cat main.tf
  120  cat variable.tf
  121  cat raham.tfvars
  122  cat main.tf
  123  terraform destroy --auto-approve
  124  terraform destroy --auto-approve -var-file="raham.tfvars"
  125  history


===================================================================

DAY-03:


cat main.tf
resource "aws_instance" "one" {
ami = var.ami_id
instance_type = var.instance_type
tags = {
Name = var.instance_name
}
}

cat variable.tf
variable "ami_id" {
}

variable "instance_type" {
}

variable "instance_name" {
}

cat swiggy.tfvars
ami_id = "ami-0261755bbcb8c4a84"

instance_type = "t2.micro"

instance_name = "swiggy"

cat zomato.tfvars
ami_id = "ami-04823729c75214919"

instance_type = "t2.medium"

instance_name = "zomato"


TERRAFORM LOCALS:
We can defin ethe value once and use it multiple times

provider "aws" {
region = "us-east-1"
}

locals {
env = "swiggy"
}

resource "aws_instance" "raham" {
ami = "ami-04823729c75214919"
instance_type = "t2.micro"
key_name = "4pmbatch"
tags = {
Name = "${local.env}"
}
}


provider "aws" {
region = "us-east-1"
}

locals {
instance_type = "t2.micro"
env = "swiggy"
}

resource "aws_instance" "raham" {
ami = "ami-04823729c75214919"
instance_type = "${local.instance_type}"
key_name = "4pmbatch"
tags = {
Name = "${local.env}"
}
}

CREATING VPC AND SUBNET:

provider "aws" {
region = "us-east-1"
}

locals {
env = "swiggy"
}

resource "aws_vpc" "one" {
cidr_block = "10.6.0.0/16"
tags = {
Name = "${local.env}-vpc"
}
}

resource "aws_subnet" "two" {
vpc_id = aws_vpc.one.id
cidr_block = "10.6.0.0/16"
tags = {
Name = "${local.env}-subnet"
}
}

resource "aws_instance" "raham" {
subnet_id = aws_subnet.two.id
ami = "ami-04823729c75214919"
instance_type = "t2.micro"
key_name = "4pmbatch"
tags = {
Name = "${local.env}"
}
}

terraform graph is used to see the infrastructre creation on a graphical way.
website: terraform graphwiz

HISTORY:

178  vim main.tf
  179  ll
  180  vim variable.tf
  181  cat main.tf
  182  cat variable.tf
  183  vim swiggy.tfvars
  184  vim zomato.tfvars
  185  cat main.tf
  186  cat variable.tf
  187  cat swiggy.tfvars
  188  cat zomato.tfvars
  189  terraform init
  190  terraform plan
  191  terraform plan -var-file="swiggy.tfvars"
  192  vim main.tf
  193  terraform plan -var-file="swiggy.tfvars"
  194  terraform apply -var-file="swiggy.tfvars" --auto-approve
  195  terraform destroy -var-file="swiggy.tfvars" --auto-approve
  196  terraform apply -var-file="zomato.tfvars" --auto-approve
  197  terraform destroy -var-file="zomato.tfvars" --auto-approve
  198  cat main.tf
  199  cat variable.tf
  200  cat swiggy.tfvars
  201  cat zomato.tfvars
  202  lll
  203  ll
  204  rm -rf swiggy.tfvars zomato.tfvars variable.tf
  205  ll
  206  vim main.tf
  207  terraform plan
  208  vim main.tf
  209  terraform apply --auto-approve
  210  vim main.tf
  211  terraform apply --auto-approve
  212  terraform state list
  213  cat terraform.tfstate
  214  cat terraform.tfstate | grep -i name
  215  vim main.tf
  216  terraform apply --auto-approve
  217  cat terraform.tfstate | grep -i name
  218  cat main.tf
  219  terraform destroy --auto-approve
  220  vim main.tf
  221  terraform apply --auto-approve
  222  terraform destroy --auto-approve
  223  cat main.tf
  224  vim main.tf
  225  cat main.tf
  226  terraform apply --auto-approve
  227  vim main.tf
  228  terraform apply --auto-approve
  229  vim main.tf
  230  terraform apply --auto-approve
  231  cat main.tf
  232  terraform graph
  233  history
